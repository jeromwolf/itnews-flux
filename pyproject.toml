[project]
name = "tech-news-digest"
version = "0.1.0"
description = "AI-powered IT/Tech news video generation system for YouTube"
authors = [
    {name = "Kelly", email = "your-email@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
keywords = ["news", "ai", "youtube", "video-generation", "english-learning", "tech-news"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: News/Diary",
]

dependencies = [
    # Core
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Web Framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "httpx>=0.25.0",

    # Database
    "sqlalchemy>=2.0.0",
    "psycopg2-binary>=2.9.9",
    "alembic>=1.12.0",

    # Cache & Queue
    "redis>=5.0.0",
    "celery>=5.3.0",

    # AI/ML - OpenAI
    "openai>=1.12.0",

    # News Crawling
    "feedparser>=6.0.10",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.3",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",

    # Video Processing
    "moviepy>=1.0.3",
    "Pillow>=10.1.0",
    "numpy>=1.26.0",

    # Audio
    "pydub>=0.25.1",

    # Utilities
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    "tenacity>=8.2.3",

    # YouTube
    "google-api-python-client>=2.108.0",
    "google-auth>=2.25.0",
    "google-auth-oauthlib>=1.1.0",
    "google-auth-httplib2>=0.1.1",

    # AWS (Optional)
    "boto3>=1.29.0",

    # Monitoring
    "sentry-sdk>=1.38.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "coverage>=7.3.2",

    # Linting & Formatting
    "ruff>=0.1.6",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",

    # Type Stubs
    "types-requests>=2.31.0",
    "types-python-dateutil>=2.8.19",
    "types-redis>=4.6.0",

    # Development Tools
    "ipython>=8.17.2",
    "ipdb>=0.13.13",
    "pre-commit>=3.5.0",
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/tech-news-digest"
Documentation = "https://github.com/yourusername/tech-news-digest/wiki"
Repository = "https://github.com/yourusername/tech-news-digest"
Issues = "https://github.com/yourusername/tech-news-digest/issues"

[project.scripts]
tech-news = "src.cli:main"
tech-news-web = "src.web.app:main"
tech-news-scheduler = "src.scheduler.daily_scheduler:main"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["src"]

[tool.setuptools.package-data]
src = ["py.typed"]

# ============================================================================
# Ruff Configuration
# ============================================================================
[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["ARG", "S"]

# ============================================================================
# Black Configuration
# ============================================================================
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
)/
'''

# ============================================================================
# isort Configuration
# ============================================================================
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# ============================================================================
# MyPy Configuration
# ============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# ============================================================================
# Pytest Configuration
# ============================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_api: marks tests that require API keys",
]
asyncio_mode = "auto"

# ============================================================================
# Coverage Configuration
# ============================================================================
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
